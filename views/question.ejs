<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Questions</title>
    <style>
        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            margin: 0;
            background-color: #f4f6f9;
            font-family: Arial, sans-serif;
            margin-bottom: 100px;
            margin-top: 50px;
        }

        form {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            width: 40%;
            text-align: center;
            margin-bottom: 40px;
        }

        input {
            display: block;
            width: calc(100% - 20px);
            margin: 10px auto;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        h1 {
            text-align: center;
        }

        .question-container {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
            max-width: 80%;
            margin-top: 20px;
        }

        .question-card {
            background: white;
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            text-align: center;
            transition: transform 0.2s;
        }

        .question-card:hover {
            transform: scale(1.05);
        }

        .question-card h2 {
            font-size: 18px;
            color: #333;
            margin-bottom: 10px;
        }

        .question-card h3 {
            font-size: 14px;
            color: #666;
            margin-bottom: 8px;
        }

        .btn-container {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-top: 10px;
        }

        .delete-btn {
            background-color: #e74c3c;
            color: white;
            border: none;
            padding: 8px 12px;
            border-radius: 5px;
            cursor: pointer;
            transition: 0.3s;
        }

        .delete-btn:hover {
            background-color: #c0392b;
        }

        .update-btn {
            background-color: #2ecc71;
            color: white;
            border: none;
            padding: 8px 12px;
            border-radius: 5px;
            cursor: pointer;
            transition: 0.3s;
        }

        .update-btn:hover {
            background-color: #27ae60;
        }

        @media (max-width: 900px) {
            .question-container {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        @media (max-width: 600px) {
            .question-container {
                grid-template-columns: repeat(1, 1fr);
            }
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.4);
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background-color: white;
            padding: 20px;
            border-radius: 10px;
            width: 30%;
            text-align: center;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        }

        .close {
            color: red;
            font-size: 24px;
            cursor: pointer;
            float: right;
        }
    </style>
</head>

<body>

    <!-- Form for creating a new question -->
    <div>
        <h1>Create new question</h1>
        <label for="text">Text</label>
        <input type="text" name="text" id="text" placeholder="ex: What is the ...">

        <label for="options">Options</label>
        <input type="text" name="options" id="options" placeholder="ex : one, two , three">

        <label for="correctAnswerIndex">Correct Answer Index</label>
        <input type="text" name="correctAnswerIndex" id="correctAnswerIndex" placeholder="ex: 2 , 3">

        <button class="update-btn" onclick="createNewQuestion()">Create new question</button>
    </div>

    <!-- List of questions -->
    <div class="question-container">
        <% questions.forEach((q, i)=> { %>
            <div class="question-card">
                <h2>Q<%= i+1 %>: <%= q.text %>
                </h2>
                <h3>Options: <%= q.options.toString() %>
                </h3>
                <h3>Correct Index: <%= q.correctAnswerIndex %>
                </h3>
                <div class="btn-container">
                    <button class="delete-btn" onclick="deleteQuestionById('<%= q._id%>')">Delete</button>
                    <button class="update-btn"
                        onclick="openUpdateModal('<%= q._id %>', '<%= q.text %>', '<%= q.options.toString() %>', '<%= q.correctAnswerIndex %>')">Update</button>
                </div>
            </div>
            <% }) %>
    </div>

    <!-- Update Modal -->
    <div id="updateModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <h2>Update Question</h2>
            <input type="hidden" id="updateId">
            <input type="text" id="updateText" placeholder="Question text">
            <input type="text" id="updateOptions" placeholder="Options">
            <input type="text" id="updateCorrectAnswerIndex" placeholder="Correct Answer Index">
            <button class="update-btn" onclick="updateQuestion()">Update</button>
        </div>
    </div>

    <script>
        // delete question : 
        const deleteQuestionById = async (questionId) => {
            try {
                const isConfirmed = confirm("Are you sure you want to delete this question?");
                if (!isConfirmed) return; // Stop execution if user cancels

                const response = await fetch(`/question/delete/${questionId}`, {
                    method: "DELETE"
                });

                if (response.ok) {
                    window.location = '/question'; // Redirect on success
                } else {
                    window.location = '/'; // Redirect on failure
                }
            } catch (error) {
                console.log(error);
            }

        }
        // create new question : 
        const createNewQuestion = async () => {
            try {
                const text = document.getElementById('text').value
                const options = document.getElementById('options').value
                const correctAnswerIndex = document.getElementById('correctAnswerIndex').value

                const response = await fetch('/question/create',
                    {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ text, options, correctAnswerIndex })
                    }
                )
                if (response.ok) {
                    window.location = '/question'
                } else {
                    window.location = '/'
                }
            } catch (error) {
                console.log(error)
            }
        }
        // update question : 
        const updateQuestionById = async (questionId, text, options, correctAnswerIndex) => {
            try {
                const isConfirmed = confirm("Are you sure you want to update this question?");
                if (!isConfirmed) return; // Stop execution if user cancels

                const response = await fetch(`/quesion/${questionId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ text, options, correctAnswerIndex })
                });

                if (response.ok) {
                    window.location = '/question'; // Redirect on success
                } else {
                    window.location = '/'; // Redirect on failure
                }
            } catch (error) {
                console.log(error);
            }

        }
        // Open modal with pre-filled data
        function openUpdateModal(id, text, options, correctAnswerIndex) {
            document.getElementById('updateId').value = id;
            document.getElementById('updateText').value = text;
            document.getElementById('updateOptions').value = options;
            document.getElementById('updateCorrectAnswerIndex').value = correctAnswerIndex;
            document.getElementById('updateModal').style.display = 'flex';
        }

        // Close modal
        function closeModal() {
            document.getElementById('updateModal').style.display = 'none';
        }

        // Update question
        async function updateQuestion() {
            const id = document.getElementById('updateId').value;
            const text = document.getElementById('updateText').value;
            const options = document.getElementById('updateOptions').value;
            const correctAnswerIndex = document.getElementById('updateCorrectAnswerIndex').value;

            try {
                const response = await fetch(`/question/${id}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ text, options, correctAnswerIndex })
                });

                if (response.ok) {
                    window.location = '/question';
                }
            } catch (error) {
                console.error(error);
            }
        }
    </script>

</body>

</html>